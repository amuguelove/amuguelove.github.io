<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on 梁波的技术博客</title>
    <link>http://amuguelove.github.io/tags/docker/</link>
    <description>Recent content in Docker on 梁波的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 15 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://amuguelove.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用Kind快速构建Kubernetes集群</title>
      <link>http://amuguelove.github.io/post/setup-kubernetes-cluster-with-kind/</link>
      <pubDate>Thu, 15 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://amuguelove.github.io/post/setup-kubernetes-cluster-with-kind/</guid>
      <description>&lt;p&gt;现在安装 Kubernetes 集群已经变得越来越简单了，出现了很多方案，各种方案都有自己适合的使用场景。虽然我们可以很快速在云环境下面启动一个 Kubernetes 集群，但是对于开发人员通常更喜欢能够快速上手的东西，&lt;a href=&#34;https://kind.sigs.k8s.io/&#34;&gt;Kubernetes in Docker（Kind）&lt;/a&gt;这个工具就可以通过创建容器来作为 Kubernetes 的节点，我们只需要在机器上安装 Docker 就可以使用，它允许我们在很短的时间内就启动一个多节点的集群，而不依赖任何其他工具或云服务商。&lt;/p&gt;
&lt;p&gt;前面的文章也讲过如何在本地使用Vagrant来快速搭建Kubernetes集群，但还是有点麻烦，而且需要自己去定制Vagrant Box，有一定的技术门槛。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker最佳实践</title>
      <link>http://amuguelove.github.io/post/docker-best-practice/</link>
      <pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://amuguelove.github.io/post/docker-best-practice/</guid>
      <description>&lt;p&gt;了解了用于构建 Dockerfile 的基本方法后，我们在编写 Dockerfile 的时候并没有一些强制要求，导致很多构建的镜像不符合一些最佳实践，典型的就是镜像构建的层数非常多，对一些基本指令的区别不是很清楚。下面介绍 Dockerfile 在实际使用中的一些最佳的实践方式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker的底层技术</title>
      <link>http://amuguelove.github.io/post/docker-underlying-technology/</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://amuguelove.github.io/post/docker-underlying-technology/</guid>
      <description>&lt;p&gt;Docker最初实现是基于 &lt;a href=&#34;https://linuxcontainers.org/lxc/introduction/&#34;&gt;LXC&lt;/a&gt;，从 0.7 版本以后开始去除 &lt;code&gt;LXC&lt;/code&gt;，转而使用自行开发的 &lt;a href=&#34;https://github.com/docker/libcontainer&#34;&gt;libcontainer&lt;/a&gt;，从 1.11 开始，则进一步演进为使用 &lt;a href=&#34;https://github.com/opencontainers/runc&#34;&gt;runC&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/containerd/containerd&#34;&gt;containerd&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Docker 本质就是宿主机的一个进程，Docker 是通过 &lt;code&gt;namespace&lt;/code&gt; 实现资源隔离，通过&lt;code&gt;cgroup&lt;/code&gt; 实现资源限制，通过写时复制技术（copy-on-write）实现了高效的文件操作。&lt;/p&gt;
&lt;p&gt;传统的虚拟机通过在宿主主机中运行 hypervisor 来模拟一整套完整的硬件环境提供给虚拟机的操作系统。虚拟机系统看到的环境是可限制的，也是彼此隔离的。 这种直接的做法实现了对资源最完整的封装，但很多时候往往意味着系统资源的浪费。 例如，以宿主机和虚拟机系统都为 Linux 系统为例，虚拟机中运行的应用其实可以利用宿主机系统中的运行环境。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Docker构建应用 | 第五篇：查看Dokcer容器使用的资源</title>
      <link>http://amuguelove.github.io/post/docker-container-stats/</link>
      <pubDate>Fri, 30 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://amuguelove.github.io/post/docker-container-stats/</guid>
      <description>&lt;p&gt;在容器的使用过程中，如果能及时的掌握容器使用的系统资源，无论对开发还是运维工作都是非常有益的。幸运的是 docker 自己就提供了这样的命令：docker stats。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Docker构建应用 | 第四篇：Docker容器</title>
      <link>http://amuguelove.github.io/post/docker-container-introdution/</link>
      <pubDate>Mon, 26 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://amuguelove.github.io/post/docker-container-introdution/</guid>
      <description>&lt;p&gt;&lt;code&gt;容器&lt;/code&gt;(Container)是&lt;code&gt;Docker&lt;/code&gt;的核心组件之一，它是用于运行&lt;code&gt;镜像&lt;/code&gt;的一个沙箱环境，是一个从&lt;code&gt;镜像&lt;/code&gt;创建的应用运行实例，&lt;code&gt;镜像&lt;/code&gt;打包、构建完成后最终都会运行于&lt;code&gt;容器&lt;/code&gt;中。&lt;code&gt;容器&lt;/code&gt;具有良好的隔离性，&lt;code&gt;容器&lt;/code&gt;之间是相互隔离、互不可见。本文将介绍&lt;code&gt;Docker&lt;/code&gt;容器的创建与管理，并以容器的生命周期为主线介绍容器的创建、管理、停止，到最终删除。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Docker构建应用 | 第三篇：Docker镜像</title>
      <link>http://amuguelove.github.io/post/docker-image-introdution/</link>
      <pubDate>Sun, 25 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://amuguelove.github.io/post/docker-image-introdution/</guid>
      <description>&lt;h2 id=&#34;1-什么是docker镜像&#34;&gt;1. 什么是Docker镜像&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;镜像&lt;/code&gt;是一个只读的层（&lt;code&gt;layer&lt;/code&gt;），由文件系统叠加构成。而&lt;code&gt;镜像&lt;/code&gt;又是&lt;code&gt;容器&lt;/code&gt;(Container)的构成单元，我们一般会将应用构建成标准的&lt;code&gt;镜像&lt;/code&gt;组件，一或多个&lt;code&gt;镜像&lt;/code&gt;叠加又构成了&lt;code&gt;容器&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Docker构建应用 | 第二篇：Dockerfile详解</title>
      <link>http://amuguelove.github.io/post/dockerfile-introdution/</link>
      <pubDate>Sat, 24 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://amuguelove.github.io/post/dockerfile-introdution/</guid>
      <description>&lt;h2 id=&#34;1-dockerfile文件格式&#34;&gt;1. Dockerfile文件格式&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Dockerfile&lt;/code&gt;文件格式如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;# Comment
INSTRUCTION arguments
# 注释
指令 参数
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Dockerfile&lt;/code&gt;文件中指令不区分大小写，但为了更易区分，约定使用&lt;code&gt;大写&lt;/code&gt;形式。&lt;/p&gt;
&lt;p&gt;Docker 会依次执行&lt;code&gt;Dockerfile&lt;/code&gt;中的指令，文件中的第一条指令必须是&lt;code&gt;FROM&lt;/code&gt;，&lt;code&gt;FROM&lt;/code&gt;指令用于指定一个基础镜像。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Docker构建应用 | 第一篇：Docker安装</title>
      <link>http://amuguelove.github.io/post/docker-install/</link>
      <pubDate>Fri, 23 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://amuguelove.github.io/post/docker-install/</guid>
      <description>&lt;p&gt;如果你是&lt;code&gt;MacOS&lt;/code&gt;系统，可以直接去官网下载&lt;code&gt;dmg&lt;/code&gt;文件，&lt;a href=&#34;https://www.docker.com/get-started&#34;&gt;下载地址&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;centos-7-安装-docker-ce&#34;&gt;CentOS 7 安装 Docker CE&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;警告：切勿在没有配置 Docker YUM 源的情况下直接使用 yum 命令安装 Docker.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-准备工作&#34;&gt;1. 准备工作&lt;/h3&gt;
&lt;h4 id=&#34;11-系统要求&#34;&gt;1.1 系统要求&lt;/h4&gt;
&lt;p&gt;Docker CE 支持 64 位版本 CentOS 7，并且要求内核版本不低于 3.10。 CentOS 7 满足最低内核的要求，但由于内核版本比较低，部分功能（如 &lt;code&gt;overlay2&lt;/code&gt; 存储层驱动）无法使用，并且部分功能可能不太稳定。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
