<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on 梁波的技术博客</title>
    <link>http://flyeric.top/tags/git/</link>
    <description>Recent content in Git on 梁波的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 30 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://flyeric.top/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>删除Github远程提交记录</title>
      <link>http://flyeric.top/post/delete-github-remote-commits/</link>
      <pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://flyeric.top/post/delete-github-remote-commits/</guid>
      <description>&lt;p&gt;最近我在快速提交代码到Github远程仓库的时候，发现提交了一些非必须文件，如缓存文件，而且这些文件比较大，影响了CI工具拉取github仓库的状态（CI工具网速不够快），导致无法将最新的提交触发CI。&lt;/p&gt;
&lt;p&gt;这里快速介绍一种快速的方法：&lt;/p&gt;
&lt;p&gt;第一步：快速找到你要回滚的&lt;code&gt;git commit id&lt;/code&gt;；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;git log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第二步：将本地变更回滚（切记使用&amp;ndash;soft，这样会保存你工作区的变更，只是移除了暂存区的代码，不要使用&amp;ndash;hard）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;git reset --soft commit-id-xxxxxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第三步：缓存你工作区的变更&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;git stash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第四步：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;git push --force --no-verify
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这时候github远程仓库，已经回滚到你reset的commitId了。切记如果这时候有别人最新的提交也是会回滚的。&lt;/p&gt;
&lt;p&gt;第五步：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;git stash pop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样你又可以修改本地的修改，之后再次提交就好了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git协同工作流的选择</title>
      <link>http://flyeric.top/post/git-flow-choose/</link>
      <pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://flyeric.top/post/git-flow-choose/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://flyeric.top/img/post/git-flow-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与传统的代码版本管理工具相比，Git 有很多的优势，因而越来越成为程序员喜欢的版本管理工具。我觉得，Git 这个代码版本管理工具最大的优势有以下几个。&lt;/li&gt;
&lt;li&gt;Git 是一个分布式的版本管理工具，而且可以是单机版的，所以，你在没有网络的时候同样可以提交（commit）代码。&lt;/li&gt;
&lt;li&gt;Git 从一个分支向另一个分支合并代码的时候，会把要合并的分支上的所有提交一个一个应用到被合并的分支上，合并后也能看得到整个代码的变更记录。而其他的版本管理工具则不能。&lt;/li&gt;
&lt;li&gt;Git 切换分支的时候通常很快。不像其他版本管理器，每个分支一份拷贝。&lt;/li&gt;
&lt;li&gt;Git 有很多非常有用的命令，让你可以很方便地工作。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Git常用指令整理</title>
      <link>http://flyeric.top/post/git-common-commands/</link>
      <pubDate>Mon, 13 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://flyeric.top/post/git-common-commands/</guid>
      <description>&lt;p&gt;整理的一些常用的Git指令&lt;/p&gt;
&lt;h3 id=&#34;创建仓库&#34;&gt;创建仓库&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;# comments&amp;quot; &amp;gt;&amp;gt; README.md
git init
git add README.md
git commit -m &amp;quot;first commit&amp;quot;
git remote add origin git@github.com:your_username/your_project.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;若仓库存在直接push &lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;git remote add origin git@github.com:your_username/your_project.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Git 生成多个 SSH Key</title>
      <link>http://flyeric.top/post/generate-multi-ssh-key/</link>
      <pubDate>Sat, 07 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://flyeric.top/post/generate-multi-ssh-key/</guid>
      <description>&lt;p&gt;当有多个git账号的时候，比如一个github，用于自己进行一些开发活动，再来一个gitlab，一般是公司内部的git。这两者你的邮箱如果不同的话，就会涉及到一个问题，生成第二个git的key的时候会覆盖第一个的key，导致必然有一个用不了。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
