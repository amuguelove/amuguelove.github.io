<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>storageclass on 梁波的技术博客</title>
    <link>http://flyeric.top/tags/storageclass/</link>
    <description>Recent content in storageclass on 梁波的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 27 Sep 2020 00:00:00 +0800</lastBuildDate><atom:link href="http://flyeric.top/tags/storageclass/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>kubernetes持久化存储（二）</title>
      <link>http://flyeric.top/post/kubernetes-storage2/</link>
      <pubDate>Sun, 27 Sep 2020 00:00:00 +0800</pubDate>
      
      <guid>http://flyeric.top/post/kubernetes-storage2/</guid>
      <description>&lt;p&gt;前面的文章里我们学习了 &lt;code&gt;PV&lt;/code&gt; 和 &lt;code&gt;PVC&lt;/code&gt; 的使用方法，但是前面的 PV 都是静态的，什么意思呢？就是我要使用的一个 PVC 的话就必须手动去创建一个 PV，我们也说过这种方式在很大程度上并不能满足我们的需求，比如我们有一个应用需要对存储的并发度要求比较高，而另外一个应用对读写速度又要求比较高，特别是对于 &lt;code&gt;StatefulSet&lt;/code&gt; 类型的应用简单的来使用静态的 PV 就很不合适了，这种情况下我们就需要用到动态 PV，也就是我们今天要讲解的 &lt;code&gt;StorageClass&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kubernetes持久化存储（一）</title>
      <link>http://flyeric.top/post/kubernetes-storage1/</link>
      <pubDate>Sat, 26 Sep 2020 00:00:00 +0800</pubDate>
      
      <guid>http://flyeric.top/post/kubernetes-storage1/</guid>
      <description>&lt;p&gt;Kubernetes提供了可靠的存储来保存应用的持久化数据，这样容器在重建后，依然可以使用之前的数据。但是显然存储资源和 CPU 资源以及内存资源有很大不同，为了屏蔽底层的技术实现细节，让用户更加方便的使用，&lt;code&gt;Kubernetes&lt;/code&gt; 便引入了 &lt;code&gt;PV&lt;/code&gt; 和 &lt;code&gt;PVC&lt;/code&gt; 两个重要的资源对象来实现对存储的管理。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
